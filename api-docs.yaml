openapi: 3.0.3
info:
  title: CF-W-FEN 3.0
  description: |-
    This is a sample DoAn1
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://cafe-k5p5.onrender.com
tags:
  - name: default
    externalDocs:
      url: http://swagger.io
  - name: customer
    description: Everything about your customer
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: staff
    description: Manage staff
    externalDocs:
      description: Find out more about staff
      url: http://swagger.io
  - name: product
    description: About product
    externalDocs:
      description: Find out more about our product
      url: http://swagger.io
  - name: table
    description: Manage tables
    externalDocs:
      description: Find out more about table
      url: http://swagger.io
  - name: material
    description: Manage raw materials
    externalDocs:
      description: Find out more about materials
      url: http://swagger.io
  - name: order
    description: Manage orders
    externalDocs:
      description: Find out more about order
      url: http://swagger.io
  - name: promote
    description: Manage promote
    externalDocs:
      description: Find out more about promote
      url: http://swagger.io
  - name: membership
    description: Manage membership
    externalDocs:
      description: Find out more about membership
      url: http://swagger.io
paths:
  /file/upload:
    post:
      summary: Upload a file to Cloudinary
      operationId: uploadFile
      tags:
        - default
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
      responses:
        "201":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imageUrl:
                    type: string
                    description: URL of the uploaded image
        "400":
          description: Invalid file
        "500":
          description: Internal server error
  /customer/list:
    get:
      tags:
        - customer
      summary: Get list of customers
      description: Retrieve a list of all customers
      operationId: getCustomers
      responses:
        "200":
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
        "500":
          description: Internal Server Error
  /customer:
    post:
      tags:
        - customer
      summary: Add a new customer to the store
      description: Add a new customer to the store
      operationId: addCustomer
      requestBody:
        description: Create a new customer in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
        - cfwfenstore_auth:
            - write:customers
            - read:customers
  /customer/{phone}:
    get:
      tags:
        - customer
      summary: Find customer by phoneNumber
      description: Returns a single customer
      operationId: getCustomerByPhoneNumber
      parameters:
        - name: phone
          in: path
          description: phonecustomer of customer to return
          required: true
          schema:
            type: string
            maxLength: 15
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid PhoneNumber supplied
        "404":
          description: Customer not found
      security:
        - api_key: []
        - cfwfenstore_auth:
            - write:customers
            - read:customers
  /customer/{id}:
    put:
      tags:
        - customer
      summary: Update an existing customer
      description: Update an existing customer by PhoneNumber
      operationId: updateCustomer
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer      
      requestBody:
        description: Update an existent customer in the store
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Le Van A"
                gender:
                  type: string
                  example: "Female"
                registrationDate:
                  type: string
                  format: date-time
                  example: "2023-12-30 12:00:00"
                rank:
                  type: string
                  example: "Đồng"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
            application/xml:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid ID supplied
        "404":
          description: Customer not found
        "422":
          description: Validation exception
      security:
        - cfwfenstore_auth:
            - write:customers
            - read:customers
    delete:
      tags:
        - customer
      summary: Deletes a Customer
      description: delete a customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          description: Customerid to delete
          required: true
          schema:
            type: string
            maxLength: 15
      responses:
        "400":
          description: Invalid customer value
      security:
        - cfwfenstore_auth:
            - write:customers
            - read:customers

  /staff/list:
    get:
      tags:
        - staff
      summary: Get list of staff
      description: Retrieve a list of all staff
      operationId: getStaff
      responses:
        "200":
          description: A list of staff
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Staff"
        "500":
          description: Internal Server Error
  /staff:
    post:
      tags:
        - staff
      summary: Add a new staff
      description: Add a new staff to the system
      operationId: addStaff
      requestBody:
        description: Staff object to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Staff"
      responses:
        "200":
          description: Staff added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
        "400":
          description: Invalid input
  /staff/{id}:
    get:
      tags:
        - staff
      summary: Find staff by ID
      description: Returns a single customer
      operationId: getStaffID
      parameters:
        - name: id
          in: path
          description: staffid to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid PhoneNumber supplied
        "404":
          description: Customer not found
    put:
      tags:
        - staff
      summary: Update an existing staff member
      operationId: updateStaff
      requestBody:
        description: Updated staff data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Staff"
      responses:
        "200":
          description: Staff member updated
    delete:
      tags:
        - staff
      summary: Delete a staff member
      operationId: deleteStaff
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Staff member deleted

  /product/list:
    get:
      tags:
        - product
      summary: Get list of products
      description: Retrieve a list of all products
      operationId: getProducts
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "500":
          description: Internal Server Error
  /product:
    post:
      tags:
        - product
      summary: Add a new product
      description: Add a new product to the system
      operationId: addProduct
      requestBody:
        description: Product object to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input
  /product/{id}:
    get:
      tags:
        - product
      summary: Get a product by ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product retrieved
    put:
      tags:
        - product
      summary: Update a product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated product data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated
    delete:
      tags:
        - product
      summary: Delete a product
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Product deleted
  /product/{id}/available:
    put:
      tags:
        - product
      summary: Update product availability
      operationId: updateProductAvailable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated product availability
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                available:
                  type: boolean
      responses:
        "200":
          description: Product availability updated
  /table/list:
    get:
      tags:
        - table
      summary: Get list of tables
      description: Retrieve a list of all tables
      operationId: getTables
      responses:
        "200":
          description: A list of tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Table"
        "500":
          description: Internal Server Error
  /table:
    post:
      tags:
        - table
      summary: Add a new table
      description: Add a new table to the system
      operationId: addTable
      requestBody:
        description: Table object to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Table"
      responses:
        "200":
          description: Table added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
        "400":
          description: Invalid input
  /table/{id}:
    get:
      tags:
        - table
      summary: Find table by ID
      description: Returns a single table
      operationId: getTableByID
      parameters:
        - name: id
          in: path
          description: ID of the table to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
        "400":
          description: Invalid ID supplied
        "404":
          description: Table not found
    put:
      tags:
        - table
      summary: Update table status
      operationId: updateTable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated table data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Table"
      responses:
        "200":
          description: Table updated
    delete:
      tags:
        - table
      summary: Delete a table
      operationId: deleteTable
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Table deleted

  /material/list:
    get:
      tags:
        - material
      summary: Get list of raw materials
      description: Retrieve a list of all raw materials
      operationId: getMaterials
      responses:
        "200":
          description: A list of raw materials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Material"
        "500":
          description: Internal Server Error
  /material:
    post:
      tags:
        - material
      summary: Add a new raw material
      description: Add a new raw material to the system
      operationId: addMaterial
      requestBody:
        description: Raw material object to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Material"
      responses:
        "200":
          description: Material added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Material"
        "400":
          description: Invalid input

  /material/{id}:
    get:
      tags:
        - material
      summary: Find material by ID
      description: Returns a single material
      operationId: getMaterialByID
      parameters:
        - name: id
          in: path
          description: ID of the material to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Material"
        "400":
          description: Invalid ID supplied
        "404":
          description: Material not found
    put:
      tags:
        - material
      summary: Update material details
      operationId: updateMaterial
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated material data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Material"
      responses:
        "200":
          description: Material updated
    delete:
      tags:
        - material
      summary: Delete a material
      operationId: deleteMaterial
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Material deleted

  /order/list:
    get:
      tags:
        - order
      summary: Get list of orders
      description: Retrieve a list of all orders
      operationId: getOrders
      responses:
        "200":
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "500":
          description: Internal Server Error
  /order:
    post:
      tags:
        - order
      summary: Create a new order
      description: Create a new order in the system
      operationId: addOrder
      requestBody:
        description: Order object to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input

  /order/{id}:
    get:
      tags:
        - order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderByID
      parameters:
        - name: id
          in: path
          description: ID of the order to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    put:
      tags:
        - order
      summary: Update an order
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated order data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Order updated
    delete:
      tags:
        - order
      summary: Delete an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Order deleted

  /promote/list:
    get:
      tags:
        - promote
      summary: Get list of promotes
      description: Retrieve a list of all promotes
      operationId: getPromote
      responses:
        "200":
          description: A list of promote
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Promote"
        "500":
          description: Internal Server Error
  /promote:
    post:
      tags:
        - promote
      summary: Add a new promote to the store
      description: Add a new promote to the store
      operationId: addPromote
      requestBody:
        description: Create a new promote in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Promote"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promote"
            application/xml:
              schema:
                $ref: "#/components/schemas/Promote"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
  /promote/{id}:
    get:
      tags:
        - promote
      summary: Find promoteid
      description: Returns a single promote
      operationId: getPromotebyID
      parameters:
        - name: id
          in: path
          description: promoteid to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promote"
        "400":
          description: Invalid PhoneNumber supplied
        "404":
          description: Promote not found
    put:
      tags:
        - promote
      summary: Update an promote
      operationId: updatePromote
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated promote data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "New Year Promotion"
                description:
                  type: string
                  example: "Discount for New Year"
                discount:
                  type: number
                  format: float
                  example: 10
                promoteType:
                  type: string
                  example: "Seasonal"
                startAt:
                  type: string
                  format: date-time
                  example: "2025-01-01 00:00:00"
                endAt:
                  type: string
                  format: date-time
                  example: "2025-01-31 23:59:59"
      responses:
        "200":
          description: promote updated
        "400":
          description: Invalid ID promote
        "404":
          description: Promote not found
        "422":
          description: Validation exception
    delete:
      tags:
        - promote
      summary: Deletes a Promote
      description: delete a promote
      operationId: deletepromote
      parameters:
        - name: id
          in: path
          description: Promote to delete
          required: true
          schema:
            type: integer
      responses:
        "400":
          description: Invalid Promote value
  /promote/coupon:
    post:
      tags:
        - promote
      summary: Create a new coupon
      description: Add a new coupon to the system.
      requestBody:
        description: Coupon object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Coupon"
      responses:
        "201":
          description: Coupon created successfully
        "400":
          description: Invalid input

  /promote/coupon/list:
    get:
      tags:
        - promote
      summary: Get a list of all coupons
      description: Retrieve all coupons in the system.
      responses:
        "200":
          description: A list of coupons

  /promote/coupon/{id}:
    get:
      tags:
        - promote
      summary: Get a coupon by ID
      description: Retrieve a single coupon by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the coupon to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Coupon details
        "404":
          description: Coupon not found

    put:
      tags:
        - promote
      summary: Update a coupon by ID
      description: Modify an existing coupon by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the coupon to update
          schema:
            type: integer
      requestBody:
        description: Updated coupon object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Coupon"
      responses:
        "200":
          description: Coupon updated successfully
        "404":
          description: Coupon not found

    delete:
      tags:
        - promote
      summary: Delete a coupon by ID
      description: Remove a coupon from the system by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the coupon to delete
          schema:
            type: integer
      responses:
        "204":
          description: Coupon deleted successfully
        "404":
          description: Coupon not found
  /membership/list:
    get:
      tags:
        - membership
      summary: Get list of membership
      description: Retrieve a list of all membership
      operationId: getMemberships
      responses:
        "200":
          description: A list of memberships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Membership"
        "500":
          description: Internal Server Error
  /membership:
    post:
      tags:
        - membership
      summary: Add a new membership to the store
      description: Add a new membership to the store
      operationId: addMembership
      requestBody:
        description: Create a new membership in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Membership"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Membership"
            application/xml:
              schema:
                $ref: "#/components/schemas/Membership"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
        - cfwfenstore_auth:
            - write:memberships
            - read:memberships
  /membership/{rank}:
    get:
      tags:
        - membership
      summary: Find membership by rank
      description: Returns a single rank
      operationId: getMembershipByRank
      parameters:
        - name: rank
          in: path
          description: membership of membership to return
          required: true
          schema:
            type: string
            maxLength: 15
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Membership"
        "400":
          description: Invalid PhoneNumber supplied
        "404":
          description: Membership not found
      security:
        - api_key: []
        - cfwfenstore_auth:
            - write:memberships
            - read:memberships
  /membership/{id}:
    put:
      tags:
        - membership
      summary: Update an existing membership
      description: Update an existing membership by id
      operationId: updateMembership
      requestBody:
        description: Update an existent Membership in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Membership"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Membership"
            application/xml:
              schema:
                $ref: "#/components/schemas/Membership"
        "400":
          description: Invalid ID supplied
        "404":
          description: Membership not found
        "422":
          description: Validation exception
      security:
        - cfwfenstore_auth:
            - write:memberships
            - read:memberships
    delete:
      tags:
        - membership
      summary: Deletes a Membership
      description: delete a Membership
      operationId: deleteMembership
      parameters:
        - name: id
          in: path
          description: Membershipid to delete
          required: true
          schema:
            type: integer
      responses:
        "400":
          description: Invalid membership value
      security:
        - cfwfenstore_auth:
            - write:memberships
            - read:memberships

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        phone:
          type: string
          maxLength: 15
          example: "0981234567"
        name:
          type: string
          example: "Le Van A"
        gender:
          type: string
          example: "Female"
        registrationDate:
          type: string
          format: date-time
          example: "2023-12-30T12:00:00Z"
        rank:
          type: string
          example: "Đồng"
      xml:
        name: customer
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
    Staff:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        gender:
          type: string
        birth:
          type: string
          format: date
        address:
          type: string
        phone:
          type: string
        workShiftID:
          type: integer
        workHours:
          type: integer
        salary:
          type: integer
        typeStaff:
          type: string
        startDate:
          type: string
          format: date
        activeStatus:
          type: boolean
        roleID:
          type: integer
        password:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: integer
        upsize:
          type: integer
        sizes:
          type: boolean
        sizem:
          type: boolean
        sizel:
          type: boolean
        category:
          type: string
        imageURL:
          type: string
        hot:
          type: boolean
        cold:
          type: boolean
        available:
          type: boolean
    Table:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        phoneOrder:
          type: string
        bookingTime:
          type: string
          format: date-time
        seatingTime:
          type: string
          format: date-time
        seat:
          type: integer
    Material:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantityImported:
          type: integer
        quantityStock:
          type: integer
        price:
          type: integer
        storageType:
          type: string
        importDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
    Order:
      type: object
      properties:
        id:
          type: integer
        customerID:
          type: string
        serviceType:
          type: string
        totalPrice:
          type: number
          format: float
        staffID:
          type: integer
        tableID:
          type: integer
        orderDate:
          type: string
          format: date
        productIDs:
          type: array
          description: List of product IDs in the order
          items:
            type: integer
        status:
          type: string
    Promote:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "New Year Promotion"
        description:
          type: string
          example: "Discount for New Year"
        discount:
          type: number
          format: float
          example: 10.5
        promoteType:
          type: string
          example: "Seasonal"
        startAt:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        endAt:
          type: string
          format: date-time
          example: "2025-01-31T23:59:59Z"

    Coupon:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: "NEWYEAR2025"
        status:
          type: string
          example: "active"
        promoteId:
          type: integer
          example: 1
    Membership:
      type: object
      properties:
        id:
          type: integer
          example: 1
        rank:
          type: string
          example: "Đồng"
        mprice:
          type: integer
          example: 200000
        discount:
          type: integer
          example: 2000
  requestBodies:
    Customer:
      description: Customer object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Customer"
        application/xml:
          schema:
            $ref: "#/components/schemas/Customer"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    cfwfenstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:customers: modify customers in your account
            read:customers: read your customers
    api_key:
      type: apiKey
      name: api_key
      in: header
